# Generated by Django 3.1.2 on 2020-11-28 11:05

import datetime
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_city', models.IntegerField(choices=[(0, 'Неизвестный'), (1, 'Крупнейшие города'), (2, 'Крупные города'), (3, 'Большие города'), (4, 'Административные центры')], default=0, verbose_name='Тип города')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('desc', models.TextField(blank=True, verbose_name='Описание')),
                ('qty_peopls', models.IntegerField(verbose_name='')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('description', models.TextField(blank=True, verbose_name='Описание мероприятия')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Назначил')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('description', models.TextField(blank=True, verbose_name='Описание мероприятия')),
                ('date_begin', models.DateField(default=datetime.date.today, verbose_name='Приступить с')),
                ('date_end', models.DateField(verbose_name='Окончить к')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.event', verbose_name='Мероприятие')),
                ('executor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Исполнитель')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=10, verbose_name='Номер телефона')),
                ('middle_name', models.CharField(max_length=30, verbose_name='Отчество')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время')),
                ('message', models.TextField(verbose_name='Сообщение')),
                ('dst', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dst', to=settings.AUTH_USER_MODEL, verbose_name='Получатель:')),
                ('src', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='src', to=settings.AUTH_USER_MODEL, verbose_name='Отправитель:')),
            ],
        ),
        migrations.CreateModel(
            name='IndexIQ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('direction1', models.DecimalField(decimal_places=2, default=Decimal('0.0'), editable=False, max_digits=5, verbose_name='Управление')),
                ('direction2', models.DecimalField(decimal_places=2, default=Decimal('0.0'), editable=False, max_digits=5, verbose_name='ЖКХ')),
                ('direction3', models.DecimalField(decimal_places=2, default=Decimal('0.0'), editable=False, max_digits=5, verbose_name='Инновации')),
                ('direction4', models.DecimalField(decimal_places=2, default=Decimal('0.0'), editable=False, max_digits=5, verbose_name='Транспорт')),
                ('direction5', models.DecimalField(decimal_places=2, default=Decimal('0.0'), editable=False, max_digits=5, verbose_name='Общественная безопасность')),
                ('direction6', models.DecimalField(decimal_places=2, default=Decimal('0.0'), editable=False, max_digits=5, verbose_name='Экологическая безопасность')),
                ('direction7', models.DecimalField(decimal_places=2, default=Decimal('0.0'), editable=False, max_digits=5, verbose_name='Туризм и сервис')),
                ('direction9', models.DecimalField(decimal_places=2, default=Decimal('0.0'), editable=False, max_digits=5, verbose_name='Экономика')),
                ('direction10', models.DecimalField(decimal_places=2, default=Decimal('0.0'), editable=False, max_digits=5, verbose_name='Сетевая связь')),
                ('indicator1', models.BooleanField(default=False, verbose_name='Наличие цифровой платформы вовлечения граждан в решение вопросов городского развития')),
                ('indicator2', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Количество уникальных активных пользователей цифровой платформы вовлечения граждан в решение вопросов городского развития на 10 тыс. человек')),
                ('indicator3', models.BooleanField(default=False, verbose_name='Наличие «цифрового двойника города»')),
                ('indicator4', models.BooleanField(default=False, verbose_name='Наличие интеллектуального центра городского управления')),
                ('indicator5', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля городских служб, обладающих доступом к ИЦГУ')),
                ('indicator6', models.BooleanField(default=False, verbose_name='Наличие системы интеллектуального учета коммунальных ресурсов')),
                ('indicator7', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля мкд, оснащенных интеллектуальными системами учета всех типов коммунальных ресурсов')),
                ('indicator8', models.BooleanField(default=False, verbose_name='Наличие автоматических систем мониторинга состояния зданий')),
                ('indicator9', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля многоквартирных домов, оснащенных автоматическими системами мониторинга состояния зданий ')),
                ('indicator10', models.BooleanField(default=False, verbose_name='Проведение общих собраний собственников помещений в многоквартирных домах (не менее 50%) посредством электронного голосования ')),
                ('indicator11', models.BooleanField(default=False, verbose_name='Наличие энергоэффективного городского освещения, включая архитектурную и художественную подсветку')),
                ('indicator12', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля уличных опор освещения города, охваченных энергоэффективными интеллектуальными системами освещения')),
                ('indicator13', models.BooleanField(default=False, verbose_name='Наличие автоматизированного контроля за выполнением работ дорожной и коммунальной техники')),
                ('indicator14', models.BooleanField(default=False, verbose_name='Наличие автоматизированной системы аренды и проката («шеринг»)')),
                ('indicator15', models.BooleanField(default=False, verbose_name='Наличие публичных wi-fi сетей')),
                ('indicator16', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля мест массового скопления людей и социально-значимых объектов, оборудованных бесплатным доступом к сети wi-fi со скоростью не менее 1 мбит/секунду на 1 пользователя')),
                ('indicator17', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Количество ДТП в городе на 10 тыс. человек ')),
                ('indicator18', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Уровень загруженности дорог')),
                ('indicator19', models.BooleanField(default=False, verbose_name='Наличие системы автоматической фото-видео фиксации нарушений ПДД')),
                ('indicator20', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля зафиксированных нарушений ПДД с применением камер видеонаблюдения высокой четкости')),
                ('indicator21', models.BooleanField(default=False, verbose_name='Наличие системы администрирования городского парковочного пространства')),
                ('indicator22', models.BooleanField(default=False, verbose_name='Наличие интеллектуального управления городским общественным транспортом')),
                ('indicator23', models.BooleanField(default=False, verbose_name='Наличие системы интеллектуального управления движением')),
                ('indicator24', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля светофоров, подключенных к системе интеллектуального управления движением')),
                ('indicator25', models.BooleanField(default=False, verbose_name='Наличие безопасных и комфортных мест ожидания общественного транспорта')),
                ('indicator26', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля «умных» мест ожидания общественного транспорта на территории городских земель')),
                ('indicator27', models.BooleanField(default=False, verbose_name='Наличие системы мониторинга состояния дорожного полотна')),
                ('indicator28', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Число преступлений на 10 тыс. человек населения города')),
                ('indicator29', models.BooleanField(default=False, verbose_name='Наличие системы интеллектуального видеонаблюдения')),
                ('indicator30', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Количество интеллектуальных камер видеонаблюдения интегрированных в единую систему по отношению к площади городских земель')),
                ('indicator31', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля преступлений, раскрытых с помощью систем интеллектуального видеонаблюдения с функциями биометрической идентификации и видеоаналитики')),
                ('indicator32', models.BooleanField(default=False, verbose_name='Наличие системы оповещения граждан о возникновении чрезвычайных ситуаций через мобильные средства связи')),
                ('indicator33', models.BooleanField(default=False, verbose_name='Наличие автоматизированной системы управления обращения с твердыми коммунальными отходами')),
                ('indicator34', models.BooleanField(default=False, verbose_name='Наличие системы онлайн-мониторинга атмосферного воздуха')),
                ('indicator35', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Число станций мониторинга атмосферного воздуха, интегрированных в единую систему онлайн-мониторинга в режиме реального времени, относительно площади городских земель')),
                ('indicator36', models.BooleanField(default=False, verbose_name='Наличие системы онлайнмониторинга воды')),
                ('indicator37', models.BooleanField(default=False, verbose_name='Наличие электронных карт жителя города и гостя города')),
                ('indicator38', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Количество уникальных активных пользователей электронных карт жителя города на 10 тыс. человек населения')),
                ('indicator39', models.BooleanField(default=False, verbose_name='Наличие комплексной системы информирования туристов и жителей города')),
                ('indicator40', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Количество просмотров онлайн-портала города на 10 тыс. человек населения города')),
                ('indicator41', models.BooleanField(default=False, verbose_name='Наличие цифровых услуг в школах, предоставляемых учащимся и их родителям')),
                ('indicator42', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля школ города, использующих систему электронных карт школьников и/ или интеллектуальных систем для прохода в учебное заведение и/ или оплаты питания')),
                ('indicator43', models.BooleanField(default=False, verbose_name='Наличие цифровых сервисов, упрощающих процесс обращения в медицинские учреждения')),
                ('indicator44', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Доля медицинских учреждений в черте города, предоставляющих услуги по электронной записи и ведению')),
                ('indicator45', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Количество товаров и услуг, доступных через электронные торговые площадки на 10 тыс. человек населения города')),
                ('indicator46', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Количество пунктов доставки компаний электронной торговли (постоматов), расположенных на территории городских земель на 10 тыс. населения')),
                ('indicator47', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5, verbose_name='Количество пунктов доставки компаний электронной торговли (постоматов), расположенных на территории городских земель на 10 тыс. населения')),
                ('index_iq', models.DecimalField(decimal_places=2, default=Decimal('0.0'), editable=False, max_digits=5, verbose_name='Итоговый индекс IQ')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city', to='mainapp.city', unique=True, verbose_name='Город')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Имзенил')),
            ],
            options={
                'verbose_name': 'Индекс IQ',
                'verbose_name_plural': 'Индексы IQ',
                'get_latest_by': 'date_update',
            },
        ),
        migrations.CreateModel(
            name='HistoryIndexIQ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datestamp', models.DateField(auto_now_add=True, verbose_name='Дата')),
                ('serialize_object', models.TextField(verbose_name='Сериализованные данные')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Изменил')),
            ],
            options={
                'verbose_name': 'История изменения индексов IQ',
                'verbose_name_plural': 'Истории изменения индексов IQ',
            },
        ),
    ]
